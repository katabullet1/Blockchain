// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require("Verifier");

// var Verifier = require("../contracts/verifier.sol")
contract('Verifier', accounts => {

    const account_one = accounts[0];

    var A_incorrect = ["0x1e11dac58a21fe014feeba71dd86621815eaf1f2a3ffabf7f92d4cfbdbccea4", "0x2cc155f59ed729a9a1266bb4ab72548a8d36ca846db360f7122135aa2868828b"];

    var proof = {
        "proof":
        {
            "A":["0xecb6fcf44dc7f11d69deeafddc260fdcedb05ea4ce6607d6304895587387f0b", "0x77682707327fc21d354ae1a7cec5483d6141f779f328387ea16d532e6174771"],
            "A_p":["0x2bacba4e56eea3bd84f627a1e05fdd917ed79f281bc99de8f95dbf8e34d10af", "0x2c2d36dc1d3ba4ef79dfdcba78e1b961f8e7e03b4856131d2a73c61e5638c08f"],
            "B":
                [["0x20bb7a65debd153e431be370c722a3367046203da5d17bd1b426a71b538f91", "0x283919be226180adf49c585b9e87296be0629bb2661acc93659838ddc3f42924"], ["0x1e767b378d104e305da7e8e769d91074f9a686fe8041c854c2eaba2a33cf1464", "0x1dd4be6e9651ab9258169a68f1b76250ec67452040c5d552be279e9615ea0839"]],
            
            "B_p":["0x2f36ac079f8b7d0d26aaf16445ed5fc1cea06fb414cbdb2891981270f331730f", "0x2bb60d5f488923b47681f81ff8ae2360e1a9bbc104e8a0db5d751b05e62bcfb4"],
            "C":["0x6e4b1db40aa5c013a3f1e80e75e6314bc90e80a46966b1c2bc474ded18d36e9", "0x2ac2be2bd3a174cb8df23f39a782a5b1e498f32a289760e3a176ab06834d2ee6"],
            "C_p":["0x2ed4325d9a66b33df13f73af2dac4099a88371fc79fd009fd93e00c3c2d809ca", "0xdb89edeb130aed09cedf0b9b8eb88696f8729170f75eacc38af70fdbff9d0fa"],
            "H":["0x2a2fde09937e1089a483251f175dae001c17f3dd089ccf5dc773819150831987", "0xcacb0569ccd7bc3cdc252f29e3497fe302e0915946e715deca8a22a4c279e26"],
            "K":["0x13ca218ff9ad542ad99bd1592a942c1f8da18f5fcf50bf7caa5d3fd431a4d7fe", "0x1c2acb6488f7d2c4541aa290e11493d71b03fa0cc7042f010ffecba8d85bf403"]
        },
        "input":[9,1]
    };
    
   
    describe('Verification', function () {
        beforeEach(async function () { 
            this.token = await Verifier.new({from: account_one});         
        })
        
        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps

        it('should test verification with correct proof', async function () { 
            let correct = await this.token.verifyTx.call(proof.proof.A, proof.proof.A_p, proof.proof.B, 
                proof.proof.B_p, proof.proof.C, proof.proof.C_p, proof.proof.H, proof.proof.K, proof.input,
                {from: account_one}
            );
            assert.equal(correct, true, "Transaction was successful");
            // expect(correct).to.be.true;
            console.log(correct)
        })

        // Test verification with incorrect proof

        it('should test verification with incorrect proof', async function () { 
            let incorrect = await this.token.verifyTx.call(A_incorrect, proof.proof.A_p, proof.proof.B, 
                proof.proof.B_p, proof.proof.C, proof.proof.C_p, proof.proof.H, proof.proof.K, proof.input,
                {from: account_one}
            );
            assert.equal(incorrect, false, 'Transaction was not successful');
            console.log(incorrect)
        })
    });
})

    
